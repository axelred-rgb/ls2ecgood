<?php 
        // user \dclass\devups\model\Model;
    /**
     * @Entity @Table(name="codepromo")
     * */
    class Codepromo extends Model implements JsonSerializable{

        /**
         * @Id @GeneratedValue @Column(type="integer")
         * @var int
         * */
        protected $id;
        /**
         * @Column(name="code", type="string" , length=255  )
         * @var string
         **/
        protected $code;
        /**
         * @Column(name="valeur", type="integer" )
         * @var integer
         **/
        protected $valeur;


        /**
         * @Column(name="nbremonth", type="integer" )
         * @var integer
         **/
        protected $nbremonth = -1;

        /**
         * @Column(name="type", type="integer" )
         * @var integer
         **/
        protected $type = 0;

        /**
         * @Column(name="state", type="integer" )
         * @var integer
         **/
        protected $state = 0;

        /**
         * @ManyToOne(targetEntity="\User")
         * @JoinColumn(onDelete="cascade")
         * @var \User
         */
        public $user;

        
        public function __construct($id = null){
            
                if( $id ) { $this->id = $id; }
            $this->user = new User();
                          
}

        public function getId() {
            return $this->id;
        }
        public function getCode() {
            return $this->code;
        }

        public function setCode($code) {
            $nb_code = Codepromo::where('code',$code)->count();

            if($nb_code > 0){

                return t('Code promo déjà utilisé');
            }

            $this->code = $code;
        }
        
        public function getValeur() {
            return $this->valeur;
        }

        public function setValeur($valeur) {
            $this->valeur = $valeur;
        }

        /**
         * @return int
         */
        public function getNbremonth(): int
        {
            return $this->nbremonth;
        }

        /**
         * @param int $nbremonth
         */
        public function setNbremonth(int $nbremonth): void
        {
            $this->nbremonth = $nbremonth;
        }

        public function getCondition(){
            if($this->nbremonth  == -1){
                return tt('Code valable pour toutes souscriptions ');
            }
            else{
                if($this->nbremonth  == 0){
                    return tt('Code valable pour tous paiements sauf les souscriptions');
                }
                else{
                    return tt("Code valable  pour  les souscriptions d'une durée supérieure ou égale à ").$this->nbremonth.tt(" mois");
                }
            }
        }

        function getUser() {
            $this->user = $this->user->__show();
            return $this->user;
        }
        function setUser(\User $user) {
            $this->user = $user;
        }

        /**
         * @return int
         */
        public function getType()
        {
            return $this->type;
        }

        /**
         * @param int $type
         */
        public function setType($type): void
        {

            $this->type = $type;
        }

        /**
         * @return int
         */
        public function getState()
        {
            return $this->state;
        }

        /**
         * @param int $state
         */
        public function setState($state)
        {
            $this->state = $state;
        }



        
        public function jsonSerialize() {
                return [
                    'id' => $this->id,
                    'code' => $this->code,
                    'valeur' => $this->valeur,
                    'nbremonth' => $this->nbremonth,
                    'user' => $this->user,
                    'type' => $this->type,
                    'state' => $this->state,
                ];
        }

        public function __insert()
        {
            if($this->type == 1){
                $user = userapp();
                $this->setUser($user);
                $this->setValeur(5);
                $this->setState(-1);
            }

            $id = parent::__insert();

            $subscriptions = Subscription::where('target','i')
                ->andwhere('type','=',1)
                ->__getAll();
            foreach ($subscriptions as $subs){
                if($subs->getMonth() < 12){
                    $codesub = new Codepromosubscription();
                    $codesub->setCodepromo(self::find($id));
                    $codesub->setSubscription(Subscription::find($subs->getId()));
                    $codesub->__insert();
                }
            }

            return $id; // TODO: Change the autogenerated stub
        }

        public function __update($arrayvalues = null, $seton = null, $case = null, $defauljoin = true)
        {
            
            $id = parent::__update($arrayvalues, $seton, $case, $defauljoin); // TODO: Change the autogenerated stub
            

            Codepromosubscription::where("codepromo_id",$this->id)->delete();
            $subscriptions = Subscription::where('target','i')
                ->andwhere('type','=',1)
                ->__getAll();
            foreach ($subscriptions as $subs){
                if($subs->getMonth() < 12){
                    $codesub = new Codepromosubscription();
                    $codesub->setCodepromo($this);
                    $codesub->setSubscription(Subscription::find($subs->getId()));
                    $codesub->__insert();
                }
            }
            return $id;

        }

    }
