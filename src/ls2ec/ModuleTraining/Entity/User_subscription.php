<?php 
        // user \dclass\devups\model\Model;
    /**
     * @Entity @Table(name="user_subscription")
     * */
    class User_subscription extends Model implements JsonSerializable{

        /**
         * @Id @GeneratedValue @Column(type="integer")
         * @var int
         * */
        protected $id;
        /**
         * @Column(name="start_date", type="string" , length=255 , nullable=true)
         * @var string
         **/
        protected $start_date;
        /**
         * @Column(name="reference", type="string" , length=255 , nullable=true)
         * @var string
         **/
        protected $reference = 'ls2ec';
        /**
         * @Column(name="duration", type="integer"  , nullable=true)
         * @var integer
         **/
        protected $duration;

        /**
         * @ManyToOne(targetEntity="\User")
         * @var \User
         */
        public $user;

        /**
         * @Column(name="isfinished", type="integer"  , nullable=true)
         * @var integer
         **/
        protected $isfinished = 0;

        /**
         * @ManyToOne(targetEntity="\Subscription")
         * @var \Subscription
         */
        public $subscription;

        /**
         * @Column(name="paypalsubscriptionid", type="string" , length=255 , nullable=true)
         * @var string
         **/
        protected $paypalsubscriptionid;

        /**
         * @Column(name="price", type="float" ,  nullable=true)
         * @var string
         **/
        protected $price;


        
        public function __construct($id = null){
            
                if( $id ) { $this->id = $id; }   
                          
	$this->user = new User();
	$this->subscription = new Subscription();
}

        public function getId() {
            return $this->id;
        }
        public function getStart_date() {
            return $this->start_date;
        }

        public function setStart_date($start_date) {
            $this->start_date = $start_date;
        }
        public function getPrice() {
            return $this->price;
        }

        public function setPrice($start_date) {
            $this->price = $start_date;
        }
        
        public function getDuration() {
            if(is_null($this->duration) || $this->duration == ''){
                $paiement = Paiement::where('user_id',$this->getUser()->getId())
                    ->andwhere('subscription_id',$this->getSubscription()->getId())
                    ->__getOne();
                return $paiement->getNbremonth();
            }
            else {
                return $this->duration;
            }
        }

        public function setDuration($duration) {
            $this->duration = $duration;
        }
        

        /**
         *  manyToOne
         *	@return \User
         */
        function getUser() {
            $this->user = $this->user->__show();
            return $this->user;
        }
        function setUser(\User $user) {
            $this->user = $user;
        }
                        
        /**
         *  manyToOne
         *	@return \Subscription
         */
        function getSubscription() {
            $this->subscription = $this->subscription->__show();
            return $this->subscription;
        }
        function setSubscription(\Subscription $subscription) {
            $this->subscription = $subscription;
        }

        public function getIsfinished()
        {
            return $this->isfinished;
        }

        /**
         * @param int $isfinished
         */
        public function setIsfinished($isfinished)
        {
            $this->isfinished = $isfinished;
        }
                /**
         * @return string
         */
        public function getPaypalsubscriptionid()
        {
            return $this->paypalsubscriptionid;
        }

        /**
         * @param string $paypalsubscriptionid
         */
        public function setPaypalsubscriptionid($paypalsubscriptionid)
        {
            $this->paypalsubscriptionid = $paypalsubscriptionid;
        }

        public function setCreatedAt($created_at)
        {
            if(is_null($created_at)){
                $created_at = date('Y-m-d H:i:s');
            }
            $this->created_at = $created_at; // TODO: Change the autogenerated stub
        }

        /**
         * @return string
         */
        public function getReference()
        {
            return $this->reference;
        }

        /**
         * @param string $reference
         */
        public function setReference($reference)
        {
            $this->reference = $reference;
        }




        public function getLastsubscriptionpaiement(){
            $su = new Subscription();
            $access_tokken = $su->generateTokken();
            $new_user_subscription = [];
            if(!is_null($this->paypalsubscriptionid) && $this->paypalsubscriptionid !== ''){
                $transactions = $su->getListTransactions($access_tokken,$this->paypalsubscriptionid);
                if(isset($transactions->transactions)){
                    if(is_array($transactions->transactions)){
                        if(count($transactions->transactions) > 0){
                            $a = 'incompleted';
                            $ispast = false;
                            $i = 0;
                            while(!$ispast && $i<count($transactions->transactions)){
                                $transactiontime = date('Y-m-d', strtotime($transactions->transactions[$i]->time));
                                $transactiontime = strtotime($transactiontime);
                                $datsubscription = strtotime($this->created_at);
                                if($transactions->transactions[$i]->status == "COMPLETED"){
                                    if($transactiontime > $datsubscription){

                                        $usersub = new User_subscription();

                                        $paiement = new Paiement();
                                        $paiement->setUser($this->user);
                                        $paiement->setSubscription($this->subscription);
                                        //$subs = Subscription::find($this->getSubscription()->getId());
                                        $price =(int)$this->price;
                                        $subs = $this->getSubscription();
                                        $tva = $price*0.2;
                                        $ttc = $price + $tva;
                                        $paiement->setMontant($ttc);
                                        $paiement->setPrice($price);
                                        $paiement->setUnitprice($price);
                                        $paiement->setTva($tva);
                                        $paiement->setTtc($ttc);
                                        $paiement->setMotif('Renouvellement du pack '.$subs->getName());
                                        $paiement->setReduction(0);
                                        $formatted_date = date("Y-m-d H:i:s", $transactiontime);
                                        $paiement->setCreatedAt($formatted_date);
                                        $paiement->setNbremonth($this->duration);
                                        $today = date("Ymd");
                                        $rand = sprintf("%04d", rand(0, 9999));
                                        $unique = $today . $rand;
                                        $paiement->setNumero($unique);
                                        $idp = $paiement->__insert();
                                        $paiement = Paiement::find($idp);
                                        $paiement->setUnitprice($price);
                                        $paiement->created_at = $formatted_date;
                                        $paiement->__update();

                                        $date = $this->created_at;
                                        $date = date('Y-m-d', strtotime($date.'+'.$this->duration.' months'));

                                        $usersub->setUser($this->user);
                                        $usersub->setSubscription($this->subscription);
                                        $usersub->setPrice($price);
                                        $usersub->setPaypalsubscriptionid($this->paypalsubscriptionid);
                                        $usersub->setDuration($this->duration);
                                        $usersub->setCreatedAt($date);
                                        $usersub->setIsfinished(0);
                                        $id = $usersub->__insert();
                                        $usersub = self::find($id);
                                        $usersub->created_at = $date;
                                        $usersub->setIsfinished(0);
                                        $usersub->__update();
                                        $usersub = self::find($id);
                                        array_push($new_user_subscription , $usersub);
                                    }
                                    else{
                                        $ispast = true;
                                    }
                                }
                                $i++;
                            }
                            //$lasttransaction = $transactions->transactions[0];

                        }
                    }
                }
            }

            return $new_user_subscription;

        }


                        
        
        public function jsonSerialize() {
                return [
                    'id' => $this->id,
                    'start_date' => $this->start_date,
                    'duration' => $this->duration,
                    'user' => $this->user,
                    'subscription' => $this->subscription,
                    'isfinished' => $this->isfinished,
                    'price' => $this->price,
                    'reference' => $this->reference
                ];
        }
        
}
