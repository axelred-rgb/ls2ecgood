{"name":"ModuleCatalog","project":"buyamsellam24","id":"4","listentity":[{"id":148,"name":"category","attribut":[{"name":"id","nullable":"not","size":"11","formtype":"text","datatype":"integer"},{"name":"name","nullable":"not","size":"25","formtype":"text","datatype":"string"},{"name":"favicon","nullable":"default","size":"55","formtype":"text","datatype":"string"},{"name":"parentid","nullable":"default","size":"11","formtype":"text","datatype":"integer"},{"name":"nameseo","nullable":"default","size":"55","formtype":"text","datatype":"string"},{"name":"main","nullable":"default","size":"11","formtype":"text","datatype":"integer"}],"relation":[],"module":{"id":"4","name":"ModuleCatalog"},"apidoc":[{"name":"Create category","request":{"method":"POST","header":[],"body":{"mode":"raw","raw":"{\"category\":{\"id\":\"\",\"name\":\"\",\"favicon\":\"\",\"parentid\":\"\",\"nameseo\":\"\",\"main\":\"\"}}"},"url":{"raw":"{{base_url}}category.create","protocol":"","host":"{{base_url}}","path":["category.create"]},"description":"Create category"},"response":[]},{"name":"Get category","request":{"method":"GET","header":[],"url":{"raw":"{{base_url}}category.detail?id=","protocol":"","host":"{{base_url}}","path":["category.detail"],"query":[{"key":"id","value":""}]},"description":"Get category"},"response":[]},{"name":"List category","request":{"method":"GET","header":[],"url":{"raw":"{{base_url}}category.lazyloading?dfilters=on&next=1&per_page=10","protocol":"","host":"{{base_url}}","path":["category.lazyloading"],"query":[{"key":"dfilters","value":"on"},{"key":"next","value":"1"},{"key":"per_page","value":"10"}]},"description":"API documentation for LibrairieNum\u00e9rique\n\nlazyloading api, how it works?\n\nthe lazyloading api is used to manage different kind of reading operation, such as filtering, pagination, order by a parameter and so on.\n\nTo enalbe lazyloading, you must specify the parameter dfilters=true and then give the attribut with following nomenclatura :\n\nattributname:opt=value\n\nattributname can be: \n- the attribut of the current class ex: name:eq=value\n- the attribut of an imbricate class following the nomenclatura: entity.attribute:opt=value ex: category.name:eq=acategory\n\nopt can be:\n- eq : =\n- lt : <\n- gt : >\n- get: >=\n- let: <=\n- lkl: like %value\n- lkr: like value%\n- btw: between (). for this option, value is specified as value1_value2 the '_' makes the separation between value1 and value2\n\nif none of those possible value of opt is specified, the request will be traited with operator like %value% by default\n\nexample:\nlet's have the class book_library:{id, stock, book:{name, price, ..., category:{}}, library: {id, name, ...}}\n\nfind a book of a specific library with id or name\n request\n - with id: {{prod_url}}book-library&dfilters=on&library.id:eq=5\n - with name: {{prod_url}}book-library&dfilters=on&library.id:opt=name\n - ordering by book id desc: {{prod_url}}book-library&dfilters=on&order=book.id desc\n\nto handle pagination you need 2 paramters: next and per_page those parameter work together (the dfilters is optional if you are just doing pagination without any other kind of filtering)\n\nexample:\nlet's have this request: go to the 5th page of book-library a print 20 element per page\n- {{prod_url}}book-library&next=5&per_page=20\n\n"},"response":[]},{"name":"Update category","request":{"method":"PUT","header":[],"body":{"mode":"raw","raw":"{\"category\":{\"id\":\"\",\"name\":\"\",\"favicon\":\"\",\"parentid\":\"\",\"nameseo\":\"\",\"main\":\"\"}}"},"url":{"raw":"{{base_url}}category.update?id=","protocol":"","host":"{{base_url}}","path":["category.update"],"query":[{"key":"id","value":""}]},"description":"Update category"},"response":[]},{"name":"Delete category","request":{"method":"DELETE","header":[],"url":{"raw":"{{base_url}}category.delete?id=","protocol":"","host":"{{base_url}}","path":["category.delete"],"query":[{"key":"id","value":""}]},"description":"Delete category"},"response":[]}]},{"id":209,"name":"declinason","attribut":[{"name":"id","nullable":"not","size":"11","formtype":"text","datatype":"integer"},{"name":"tall_code","nullable":"default","size":"25","formtype":"text","datatype":"string"},{"name":"tall_label","nullable":"default","size":"25","formtype":"text","datatype":"string"},{"name":"color_code","nullable":"default","size":"25","formtype":"text","datatype":"string"},{"name":"color_label","nullable":"default","size":"25","formtype":"text","datatype":"string"},{"name":"price","nullable":"not","size":"25","formtype":"text","datatype":"string"}],"relation":[{"entity":"product","cardinality":"manyToOne","nullable":"default","ondelete":"cascade","onupdate":"cascade"},{"entity":"status","cardinality":"manyToOne","nullable":"not","ondelete":"cascade","onupdate":"cascade"}],"module":{"id":"4","name":"ModuleCatalog"},"apidoc":[{"name":"Create declinason","request":{"method":"POST","header":[],"body":{"mode":"raw","raw":"{\"declinason\":{\"id\":\"\",\"tall_code\":\"\",\"tall_label\":\"\",\"color_code\":\"\",\"color_label\":\"\",\"price\":\"\",\"product.id\":\"\",\"status.id\":\"\"}}"},"url":{"raw":"{{base_url}}declinason.create","protocol":"","host":"{{base_url}}","path":["declinason.create"]},"description":"Create declinason"},"response":[]},{"name":"Get declinason","request":{"method":"GET","header":[],"url":{"raw":"{{base_url}}declinason.detail?id=","protocol":"","host":"{{base_url}}","path":["declinason.detail"],"query":[{"key":"id","value":""}]},"description":"Get declinason"},"response":[]},{"name":"List declinason","request":{"method":"GET","header":[],"url":{"raw":"{{base_url}}declinason.lazyloading?dfilters=on&next=1&per_page=10","protocol":"","host":"{{base_url}}","path":["declinason.lazyloading"],"query":[{"key":"dfilters","value":"on"},{"key":"next","value":"1"},{"key":"per_page","value":"10"}]},"description":"API documentation for LibrairieNum\u00e9rique\n\nlazyloading api, how it works?\n\nthe lazyloading api is used to manage different kind of reading operation, such as filtering, pagination, order by a parameter and so on.\n\nTo enalbe lazyloading, you must specify the parameter dfilters=true and then give the attribut with following nomenclatura :\n\nattributname:opt=value\n\nattributname can be: \n- the attribut of the current class ex: name:eq=value\n- the attribut of an imbricate class following the nomenclatura: entity.attribute:opt=value ex: category.name:eq=acategory\n\nopt can be:\n- eq : =\n- lt : <\n- gt : >\n- get: >=\n- let: <=\n- lkl: like %value\n- lkr: like value%\n- btw: between (). for this option, value is specified as value1_value2 the '_' makes the separation between value1 and value2\n\nif none of those possible value of opt is specified, the request will be traited with operator like %value% by default\n\nexample:\nlet's have the class book_library:{id, stock, book:{name, price, ..., category:{}}, library: {id, name, ...}}\n\nfind a book of a specific library with id or name\n request\n - with id: {{prod_url}}book-library&dfilters=on&library.id:eq=5\n - with name: {{prod_url}}book-library&dfilters=on&library.id:opt=name\n - ordering by book id desc: {{prod_url}}book-library&dfilters=on&order=book.id desc\n\nto handle pagination you need 2 paramters: next and per_page those parameter work together (the dfilters is optional if you are just doing pagination without any other kind of filtering)\n\nexample:\nlet's have this request: go to the 5th page of book-library a print 20 element per page\n- {{prod_url}}book-library&next=5&per_page=20\n\n"},"response":[]},{"name":"Update declinason","request":{"method":"PUT","header":[],"body":{"mode":"raw","raw":"{\"declinason\":{\"id\":\"\",\"tall_code\":\"\",\"tall_label\":\"\",\"color_code\":\"\",\"color_label\":\"\",\"price\":\"\",\"product.id\":\"\",\"status.id\":\"\"}}"},"url":{"raw":"{{base_url}}declinason.update?id=","protocol":"","host":"{{base_url}}","path":["declinason.update"],"query":[{"key":"id","value":""}]},"description":"Update declinason"},"response":[]},{"name":"Delete declinason","request":{"method":"DELETE","header":[],"url":{"raw":"{{base_url}}declinason.delete?id=","protocol":"","host":"{{base_url}}","path":["declinason.delete"],"query":[{"key":"id","value":""}]},"description":"Delete declinason"},"response":[]}]},{"id":467,"name":"product","attribut":[{"name":"id","nullable":"not","size":"11","formtype":"text","datatype":"integer"},{"name":"name","nullable":"not","size":"55","formtype":"text","datatype":"string"},{"name":"namecanonical","nullable":"default","size":"55","formtype":"text","datatype":"string"},{"name":"nameseo","nullable":"not","size":"55","formtype":"text","datatype":"string"},{"name":"reference","nullable":"default","size":"25","formtype":"text","datatype":"string"},{"name":"priceofsale","nullable":"default","size":"11","formtype":"text","datatype":"integer"},{"name":"description","nullable":"default","size":"","formtype":"textarea","datatype":"text"},{"name":"cover","nullable":"default","size":"255","formtype":"text","datatype":"string"},{"name":"arrival","nullable":"not","size":"","formtype":"radio","datatype":"boolean"},{"name":"inpromotion","nullable":"not","size":"","formtype":"radio","datatype":"boolean"},{"name":"promotion_price","nullable":"default","size":"","formtype":"radio","datatype":"boolean"},{"name":"remnant_sale","nullable":"not","size":"","formtype":"radio","datatype":"boolean"},{"name":"remnant_sale_percentage","nullable":"default","size":"","formtype":"radio","datatype":"boolean"},{"name":"filedir","nullable":"default","size":"55","formtype":"text","datatype":"string"},{"name":"sommary","nullable":"default","size":"","formtype":"textarea","datatype":"text"}],"relation":[{"entity":"market","cardinality":"manyToOne","nullable":"default","ondelete":"cascade","onupdate":"cascade"},{"entity":"status","cardinality":"manyToOne","nullable":"not","ondelete":"cascade","onupdate":"cascade"}],"module":{"id":"4","name":"ModuleCatalog"},"apidoc":[{"name":"Create product","request":{"method":"POST","header":[],"body":{"mode":"raw","raw":"{\"product\":{\"id\":\"\",\"name\":\"\",\"namecanonical\":\"\",\"nameseo\":\"\",\"reference\":\"\",\"priceofsale\":\"\",\"description\":\"\",\"cover\":\"\",\"arrival\":\"\",\"inpromotion\":\"\",\"promotion_price\":\"\",\"remnant_sale\":\"\",\"remnant_sale_percentage\":\"\",\"filedir\":\"\",\"sommary\":\"\",\"market.id\":\"\",\"status.id\":\"\"}}"},"url":{"raw":"{{base_url}}product.create","protocol":"","host":"{{base_url}}","path":["product.create"]},"description":"Create product"},"response":[]},{"name":"Get product","request":{"method":"GET","header":[],"url":{"raw":"{{base_url}}product.detail?id=","protocol":"","host":"{{base_url}}","path":["product.detail"],"query":[{"key":"id","value":""}]},"description":"Get product"},"response":[]},{"name":"List product","request":{"method":"GET","header":[],"url":{"raw":"{{base_url}}product.lazyloading?dfilters=on&next=1&per_page=10","protocol":"","host":"{{base_url}}","path":["product.lazyloading"],"query":[{"key":"dfilters","value":"on"},{"key":"next","value":"1"},{"key":"per_page","value":"10"}]},"description":"API documentation for LibrairieNum\u00e9rique\n\nlazyloading api, how it works?\n\nthe lazyloading api is used to manage different kind of reading operation, such as filtering, pagination, order by a parameter and so on.\n\nTo enalbe lazyloading, you must specify the parameter dfilters=true and then give the attribut with following nomenclatura :\n\nattributname:opt=value\n\nattributname can be: \n- the attribut of the current class ex: name:eq=value\n- the attribut of an imbricate class following the nomenclatura: entity.attribute:opt=value ex: category.name:eq=acategory\n\nopt can be:\n- eq : =\n- lt : <\n- gt : >\n- get: >=\n- let: <=\n- lkl: like %value\n- lkr: like value%\n- btw: between (). for this option, value is specified as value1_value2 the '_' makes the separation between value1 and value2\n\nif none of those possible value of opt is specified, the request will be traited with operator like %value% by default\n\nexample:\nlet's have the class book_library:{id, stock, book:{name, price, ..., category:{}}, library: {id, name, ...}}\n\nfind a book of a specific library with id or name\n request\n - with id: {{prod_url}}book-library&dfilters=on&library.id:eq=5\n - with name: {{prod_url}}book-library&dfilters=on&library.id:opt=name\n - ordering by book id desc: {{prod_url}}book-library&dfilters=on&order=book.id desc\n\nto handle pagination you need 2 paramters: next and per_page those parameter work together (the dfilters is optional if you are just doing pagination without any other kind of filtering)\n\nexample:\nlet's have this request: go to the 5th page of book-library a print 20 element per page\n- {{prod_url}}book-library&next=5&per_page=20\n\n"},"response":[]},{"name":"Update product","request":{"method":"PUT","header":[],"body":{"mode":"raw","raw":"{\"product\":{\"id\":\"\",\"name\":\"\",\"namecanonical\":\"\",\"nameseo\":\"\",\"reference\":\"\",\"priceofsale\":\"\",\"description\":\"\",\"cover\":\"\",\"arrival\":\"\",\"inpromotion\":\"\",\"promotion_price\":\"\",\"remnant_sale\":\"\",\"remnant_sale_percentage\":\"\",\"filedir\":\"\",\"sommary\":\"\",\"market.id\":\"\",\"status.id\":\"\"}}"},"url":{"raw":"{{base_url}}product.update?id=","protocol":"","host":"{{base_url}}","path":["product.update"],"query":[{"key":"id","value":""}]},"description":"Update product"},"response":[]},{"name":"Delete product","request":{"method":"DELETE","header":[],"url":{"raw":"{{base_url}}product.delete?id=","protocol":"","host":"{{base_url}}","path":["product.delete"],"query":[{"key":"id","value":""}]},"description":"Delete product"},"response":[]}]}]}